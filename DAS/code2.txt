from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import pandas as pd
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time


options = webdriver.ChromeOptions()
options.add_argument('--headless')  # Uncomment to run headless
driver = webdriver.Chrome()

driver.get('https://www.mse.mk/mk/stats/symbolhistory/REPL')


years = list(range(2014, 2024))  # Modify this range based on the current year
columns = [
    'Датум', 'Цена на последна трансакција', 'Мак.', 'Мин.', 'Просечна цена',
    '%пром.', 'Количина', 'Промет во БЕСТ во денари', 'Вкупен промет во денари'
]

all_data = []


WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, 'Code')))

select = Select(driver.find_element(By.NAME, 'Code'))
options = [option.text for option in select.options if option.text != 'Изберете симбол']


for option in options:
    for year in years:
        from_date = f'01.01.{year}'
        to_date = f'31.12.{year}'
        print(f"Processing {option} for {year}")
        
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.NAME, 'Code')))
       
        select.select_by_visible_text(option)
        
    
        from_date_input = driver.find_element(By.ID, 'FromDate')
        to_date_input = driver.find_element(By.ID, 'ToDate')
        from_date_input.clear()
        from_date_input.send_keys(from_date)
        to_date_input.clear()
        to_date_input.send_keys(to_date)


        submit_button = driver.find_element(By.CSS_SELECTOR, 'input[type="submit"]')
        submit_button.click()

        # Wait for the table rows to appear after form submission
       # WebDriverWait(driver, 30).until(
        #    EC.presence_of_element_located((By.XPATH, '//table[@id="resultsTable"]/tbody/tr'))
       # )

               data = driver.page_source
        soup = BeautifulSoup(data, 'html.parser')
        print(driver.current_url)
        
        
        rows = soup.select('tbody > tr')
        extracted_data = []
        if not rows:
           print(f"No rows found for {option} in {year}. Skipping this symbol and year.")
           continue  # Continue to the next year or symbol
     
        for row in rows:
            cells = row.find_all('td')
            row_data = [cell.text.strip().replace(',', '.') for cell in cells]
            extracted_data.append(row_data)

   
        if extracted_data:  # Only create DataFrame if data exists
            df = pd.DataFrame(extracted_data, columns=columns)
            # Add a column to indicate the stock symbol
            df['Stock Symbol'] = option
            all_data.append(df)

     
        time.sleep(1)

if all_data:
    final_df = pd.concat(all_data, ignore_index=True)
    print(final_df)


    final_df.to_csv('data_all_codes.csv', index=False)
else:
    print("No data was retrieved.")

driver.quit()
